#!/usr/bin/python
import sys
import os
import json
import subprocess

bad_chars = [";","#","$","{"]

def parseJSON(source,flag):
    #If the challenges.json file already exists, read from it.
    if(os.path.isfile("/opt/challenges/challenges.json")):
        json_file = open("/opt/challenges/challenges.json","r")
        json_data = json.load(json_file)
        json_file.close()
        json_data[source] = {}
        json_data[source].update({"Service Type":"Local","Flag":flag,"User":"ctf2"})
    else:
        json_data = {}
        json_data[source] = {}
        json_data[source].update({"Service Type":"Local","Flag":flag,"User":"ctf2"})
    new_json = open("/opt/challenges/challenges.json","w")
    json.dump(json_data,new_json)
    new_json.close()
    os.system("chown www-data.www-data /opt/challenges/challenges.json")

def last(aString,aCharacter):
    index = -1
    for i in range(len(aString)):
        if(aString[i]==aCharacter):
            index = i
    return index

def main():
    if(len(sys.argv) < 2):
        print("Usage: ./local.py <path to source code> <path to flag (optional)>")
        exit(-1)
    #Check to see if file exists
    if(os.path.isfile(sys.argv[1])==False):
        print("File not found!")
        exit(-2)
    if(len(sys.argv)>2 and os.path.isfile(sys.argv[2])==False):
        print("Flag not found!")
        exit(-3)
    #Check for dangerous filenames
    for char in bad_chars:
        if(char in sys.argv[1]):
            print("Invalid Filename!")
            exit(-4)
        if(len(sys.argv)>2 and char in sys.argv[2]):
            print("Invalid Flag Filename!")
            exit(-5)
    #Get file extension
    filetype = sys.argv[1][last(sys.argv[1],".")+1:]
    #Get output name
    output = sys.argv[1][last(sys.argv[1],"/")+1:last(sys.argv[1],".")]
    #Get current directory
    #cwd = os.getcwd() + "/"
    if(filetype=="c"):
        os.system("gcc " + sys.argv[1] + " -o " + cwd + output)
        os.system("sudo chown ctf2.ctf2 " + output)
        os.system("sudo chmod 4711 " + output)
        os.system("sudo mv ./" + output + " /opt/challenges/")
    elif(filetype=="cpp"):    
        os.system("g++ " + sys.argv[1] + " -o " + cwd + output)
        os.system("sudo chown ctf2.ctf2 " + output)
        os.system("sudo chmod 4711 " + output)
        os.system("sudo mv ./" + output + " /opt/challenges/")
    elif(filetype=="py"):
        wrapper = open(output+".cpp","w");
        wrapperCode = [
            "#include <iostream>\n",
            "#include <bits/stdc++.h>\n",
            "#include <string>\n",
            "using namespace std;\n"
            "int main(int argc, char *argv[])\n",
            "{\n",
            "system(\"python " + sys.argv[1] + "\");\n",
            "}\n"]
        wrapper.writelines(wrapperCode)
        wrapper.close()
        os.system("g++ " + output + ".cpp" + " -o " + output)
        os.system("sudo chown ctf2.ctf2 " + output)
        os.system("sudo chmod 4711 " + output)
        os.system("sudo mv ./" + output + " /opt/challenges/")
        os.system("rm " + output + ".cpp")
    elif(filetype=="zip"):
        os.system("rm -r /opt/makedir")
        os.system("mkdir /opt/makedir")
        os.system("unzip -o " + sys.argv[1] + " -d /opt/makedir")
        os.system("make -C /opt/makedir")
        output = subprocess.check_output("ls -Art /opt/makedir/ | tail -n 1",shell=True).replace("\n","")
        os.system("mv \"/opt/makedir/`ls -Art /opt/makedir/| tail -n 1`\" /opt/challenges")
        os.system("chown ctf2.ctf2 /opt/challenges/" + output)
        os.system("chmod 4711 /opt/challenges/" + output)
    #Copy flag over
    if(len(sys.argv)>2):
        flagname = sys.argv[2][last(sys.argv[2],"/")+1:]
        os.system("cp " + sys.argv[2] + " /opt/challenges/")
        os.system("chown ctf2.ctf2 /opt/challenges/" + flagname)
        os.system("chmod 600 /opt/challenges/"+flagname)
    #Add to JSON data
        parseJSON(output,flagname)
    else:
        parseJSON(output,"None")

main()
